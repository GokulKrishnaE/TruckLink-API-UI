// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TruckLink.Infrastructure.Data;

#nullable disable

namespace TruckLink.Infrastructure.Migrations
{
    [DbContext(typeof(TruckLinkDbContext))]
    [Migration("20250705075622_postgresmigration")]
    partial class postgresmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TruckLink.Core.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AcceptedByDriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("accepted_by_driver_id");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_info");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("destination");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("double precision")
                        .HasColumnName("distance_km");

                    b.Property<decimal>("Earnings")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("earnings");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_accepted");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<string>("LoadItem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("load_item");

                    b.Property<string>("MapUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("map_url");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("start_location");

                    b.HasKey("Id")
                        .HasName("p_k_jobs");

                    b.HasIndex("AcceptedByDriverId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("jobs");
                });

            modelBuilder.Entity("TruckLink.Core.Entities.JobInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_accepted");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mobile_number");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at");

                    b.HasKey("Id")
                        .HasName("p_k_job_interests");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("i_x_job_interests_driver_id");

                    b.HasIndex("JobId")
                        .HasDatabaseName("i_x_job_interests_job_id");

                    b.ToTable("job_interests");
                });

            modelBuilder.Entity("TruckLink.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("p_k_users");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("TruckLink.Core.Entities.Job", b =>
                {
                    b.HasOne("TruckLink.Core.Entities.User", "AcceptedByDriver")
                        .WithMany("AcceptedJobs")
                        .HasForeignKey("AcceptedByDriverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TruckLink.Core.Entities.User", "CreatedByUser")
                        .WithMany("PostedJobs")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcceptedByDriver");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("TruckLink.Core.Entities.JobInterest", b =>
                {
                    b.HasOne("TruckLink.Core.Entities.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_job_interests__users_driver_id");

                    b.HasOne("TruckLink.Core.Entities.Job", "Job")
                        .WithMany("Interests")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_job_interests_jobs_job_id");

                    b.Navigation("Driver");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("TruckLink.Core.Entities.Job", b =>
                {
                    b.Navigation("Interests");
                });

            modelBuilder.Entity("TruckLink.Core.Entities.User", b =>
                {
                    b.Navigation("AcceptedJobs");

                    b.Navigation("PostedJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
